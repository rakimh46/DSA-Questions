https://leetcode.com/problems/minimize-malware-spread/
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }

        int[] infected = new int[n];

        for (int e : initial) {
            int p = uf.find(e);
            infected[p]++;
        }

        int ans = -1;
        int maxsize = -1;
        for (int e : initial) {
            int p = uf.find(e);
            if (infected[p] == 1 && uf.size[p] >= maxsize) {
                if (uf.size[p] == maxsize) {
                    ans = Math.min(ans, e);
                } else {
                    ans = e;
                }
                maxsize = uf.size[p];
            }
        }
        if (ans == -1) {
            int min = n + 1;
            for (int e : initial) {
                min = Math.min(min, e);
            }
            return min;
        }
        return ans;
    }

    class UnionFind {
        int par[];
        int size[];

        UnionFind(int vtx) {
            par = new int[vtx];
            size = new int[vtx];
            for (int i = 0; i < vtx; i++) {
                par[i] = i;
                size[i] = 1;
            }
        }

        void union(int v1, int v2) {
            int rt1 = find(v1);
            int rt2 = find(v2);

            if (rt1 != rt2) {
                if (size[rt1] >= size[rt2]) {
                    par[rt2] = rt1;
                    size[rt1] += size[v2];
                } else if (size[v1] < size[rt2]) {
                    par[rt1] = rt2;
                    size[rt2] += size[rt1];;
                }
            }
        }

        int find(int vtx) {
            if (par[vtx] == vtx) {
                return vtx;
            }
            return par[vtx] = find(par[vtx]);
        }
    }

}
